// <auto-generated />
using System;
using Catalog.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Domain.Entities.AttributeDataTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("attribute_datatype", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "String"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Decimal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Boolean"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Time"
                        },
                        new
                        {
                            Id = 7,
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Multiselect"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dropdown"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeDataTypeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_datatype_id");

                    b.Property<int?>("AttributeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_group_id");

                    b.Property<int?>("AttributeIconId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_icon_id");

                    b.Property<int?>("CategoryMasterId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<bool>("IsCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_custom");

                    b.Property<bool>("IsFilterable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_filterable");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<bool>("IsSummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_summary");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("label");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<int?>("SubCategoryMasterId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDataTypeId");

                    b.HasIndex("AttributeGroupId");

                    b.HasIndex("AttributeIconId");

                    b.HasIndex("SubCategoryMasterId");

                    b.ToTable("catalog_attribute", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttributeAllowedValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CatalogAttributeId");

                    b.ToTable("attribute_allowed_value", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttributeGroupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GroupKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("attribute_group", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Basic Information",
                            GroupKey = "basic_info",
                            IsActive = true,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Technical Specifications",
                            GroupKey = "technical_specs",
                            IsActive = true,
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Variant Details",
                            GroupKey = "variant_info",
                            IsActive = true,
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttributeIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IconCodePoint")
                        .HasColumnType("int")
                        .HasColumnName("icon_code_point");

                    b.Property<string>("IconFontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon_font_family");

                    b.Property<string>("IconName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon_name");

                    b.HasKey("Id");

                    b.ToTable("attribute_icon", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryAttributeGroupMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_group_id");

                    b.Property<int?>("CategoryMasterId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<int?>("SubCategoryMasterId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("AttributeGroupId");

                    b.ToTable("attribute_group_mapping", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeGroupId = 1,
                            CategoryMasterId = 1,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            AttributeGroupId = 2,
                            CategoryMasterId = 1,
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            AttributeGroupId = 3,
                            CategoryMasterId = 1,
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryLocalizedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("language_code");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("localized_description");

                    b.Property<string>("LocalizedName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("localized_name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("category_localized_text", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_type");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category_master", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.PoojaKitItemMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KitSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("kit_subcategory_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<int>("ProductSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_subcategory_id");

                    b.HasKey("Id");

                    b.HasIndex("KitSubcategoryId");

                    b.HasIndex("ProductSubcategoryId");

                    b.ToTable("pooja_kit_item_Master", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.SubCategoryLocalizedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("language_code");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("localized_description");

                    b.Property<string>("LocalizedName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("localized_name");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("sub_category_localized_text", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.SubCategoryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryMasterId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_subcategory_id");

                    b.Property<int>("SubcategoryType")
                        .HasColumnType("int")
                        .HasColumnName("subcategory_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryMasterId");

                    b.HasIndex("ParentSubcategoryId");

                    b.ToTable("sub_category_master", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttribute", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.AttributeDataTypeMaster", "AttributeDataType")
                        .WithMany("CatalogAttributes")
                        .HasForeignKey("AttributeDataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.Entities.CatalogAttributeGroupMaster", "AttributeGroup")
                        .WithMany()
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Catalog.Domain.Entities.CatalogAttributeIcon", "AttributeIcon")
                        .WithMany()
                        .HasForeignKey("AttributeIconId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Catalog.Domain.Entities.SubCategoryMaster", "SubCategoryMaster")
                        .WithMany("CatalogAttributes")
                        .HasForeignKey("SubCategoryMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AttributeDataType");

                    b.Navigation("AttributeGroup");

                    b.Navigation("AttributeIcon");

                    b.Navigation("SubCategoryMaster");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttributeAllowedValue", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.CatalogAttribute", "CatalogAttribute")
                        .WithMany("AllowedValues")
                        .HasForeignKey("CatalogAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogAttribute");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryAttributeGroupMapping", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.CatalogAttributeGroupMaster", "AttributeGroup")
                        .WithMany()
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryLocalizedText", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.CategoryMaster", "Category")
                        .WithMany("Localizations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.PoojaKitItemMaster", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.SubCategoryMaster", "KitSubcategory")
                        .WithMany()
                        .HasForeignKey("KitSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.Entities.SubCategoryMaster", "ProductSubcategory")
                        .WithMany()
                        .HasForeignKey("ProductSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KitSubcategory");

                    b.Navigation("ProductSubcategory");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.SubCategoryLocalizedText", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.SubCategoryMaster", "SubCategory")
                        .WithMany("Localizations")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.SubCategoryMaster", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.CategoryMaster", "CategoryMaster")
                        .WithMany("SubCategoryMasters")
                        .HasForeignKey("CategoryMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.Entities.SubCategoryMaster", "ParentSubcategory")
                        .WithMany("ChildSubcategories")
                        .HasForeignKey("ParentSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CategoryMaster");

                    b.Navigation("ParentSubcategory");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.AttributeDataTypeMaster", b =>
                {
                    b.Navigation("CatalogAttributes");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CatalogAttribute", b =>
                {
                    b.Navigation("AllowedValues");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryMaster", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("SubCategoryMasters");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.SubCategoryMaster", b =>
                {
                    b.Navigation("CatalogAttributes");

                    b.Navigation("ChildSubcategories");

                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
